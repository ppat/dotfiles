#!/bin/bash

set -euo pipefail

# Function to print usage
print_usage() {
  cat << EOF
Usage: $(basename "$0") [--include-recommends] [--csv] [--top=N] [--max-parents=N] [--exclude-file=FILE] package1 [package2 ...]
Options:
  --include-recommends  Include recommended packages in analysis (apt-only)
  --csv                Output in CSV format
  --top=N              Show only top N largest dependencies
  --max-parents=N      Exclude dependencies required by more than N packages
  --exclude-file=FILE  File containing packages to exclude from analysis
Examples:
  $(basename "$0") ffmpeg
  $(basename "$0") ffmpeg vim python3 --top=10
  $(basename "$0") --include-recommends nginx postgresql-client
  $(basename "$0") --exclude-file=excluded.txt ffmpeg
EOF
}

# Function to parse command line arguments
parse_args() {
  declare -n _include_recommends=$1
  declare -n _csv_output=$2
  declare -n _top_n=$3
  declare -n _max_parents=$4
  declare -n _packages=$5
  declare -n _exclude_file=$6
  shift 6

  while [ $# -gt 0 ]; do
    case "${1}" in
      --help)
        print_usage
        exit 0
        ;;
      --csv)
        _csv_output=1
        shift
        ;;
      --include-recommends)
        _include_recommends=1
        shift
        ;;
      --top=*)
        if [[ ${1#*=} =~ ^[0-9]+$ ]]; then
          _top_n="${1#*=}"
          shift
        else
          echo "Error: --top=N requires a numeric value" >&2
          exit 1
        fi
        ;;
      --max-parents=*)
        if [[ ${1#*=} =~ ^[0-9]+$ ]]; then
          _max_parents="${1#*=}"
          shift
        else
          echo "Error: --max-parents=N requires a numeric value" >&2
          exit 1
        fi
        ;;
      --exclude-file=*)
        if [ -f "${1#*=}" ]; then
          _exclude_file="${1#*=}"
          shift
        else
          echo "Error: ${1#*=} is not a valid file (for --exclude-file)" >&2
          exit 1
        fi
        ;;
      -*)
        echo "Error: Unknown option $1" >&2
        print_usage
        exit 1
        ;;
      *)
        _packages+=("${1}")
        shift
        ;;
    esac
  done

  # Validate input
  if [ "${#_packages[@]}" -eq 0 ]; then
    echo "Error: At least one package name is required" >&2
    print_usage
    exit 1
  fi
}

# Function to detect package manager
detect_pkg_manager() {
  if command -v apt-get >/dev/null 2>&1; then
    echo "apt"
  elif command -v apk >/dev/null 2>&1; then
    echo "apk"
  else
    echo "Error: Neither apt nor apk package manager found" >&2
    exit 1
  fi
}

# Function to check if the package cache is available and up-to-date
check_cache_status() {
  local pkg_manager=$1

  if [ "$pkg_manager" = "apt" ]; then
    if [ ! -d "/var/lib/apt/lists" ] || [ ! "$(ls -A /var/lib/apt/lists)" ]; then
      echo "Error: apt cache is unavailable. Please run 'apt update' to refresh package lists." >&2
      exit 1
    elif [ "$(find /var/lib/apt/lists -type f -mtime +1 2>/dev/null)" ]; then
      echo "Warning: apt cache is older than one day. You may want to run 'apt update'." >&2
    fi
  elif [ "$pkg_manager" = "apk" ]; then
    if [ ! -d "/var/cache/apk" ] || [ ! "$(ls -A /var/cache/apk)" ]; then
      echo "Error: apk cache is unavailable. Please run 'apk update' to refresh package lists." >&2
      exit 1
    elif [ "$(find /var/cache/apk -type f -mtime +1 2>/dev/null)" ]; then
      echo "Warning: apk cache is older than one day. You may want to run 'apk update'." >&2
    fi
  fi
}

# Function to convert bytes to human readable format
human_size() {
  local bytes=$1
  if [ "$bytes" -lt 1024 ]; then
    echo "${bytes}B"
  elif [ "$bytes" -lt 1048576 ]; then
    echo "$(printf "%.1f" "$(echo "scale=1; $bytes/1024" | bc)")KB"
  else
    echo "$(printf "%.1f" "$(echo "scale=1; $bytes/1048576" | bc)")MB"
  fi
}

# Function to get package dependencies
get_dependencies() {
  local pkg=$1
  local pkg_manager=$2
  local include_recommends=$3
  local temp_dir=$4
  local exclude_file=$5

  local deps_file="${temp_dir}/deps_${pkg}.txt"

  if [ "$pkg_manager" = "apt" ]; then
    if [ "$include_recommends" -eq 1 ]; then
      apt-cache depends --recurse "$pkg" 2>/dev/null | grep '^\w' > "$deps_file" || true
    else
      apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances "$pkg" 2>/dev/null | grep '^\w' > "$deps_file" || true
    fi
  else
    apk info -R "$pkg" 2>/dev/null | tail -n +2 > "$deps_file" || true
  fi

  # Filter out excluded packages if exclude file is provided
  if [ -n "$exclude_file" ]; then
    if [ -f "$deps_file" ]; then
      grep -v -x -f "$exclude_file" "$deps_file" > "${deps_file}.tmp" || true
      mv "${deps_file}.tmp" "$deps_file"
    fi
  fi

  # Record dependency mapping
  while read -r dep; do
    echo "${dep}:${pkg}" >> "${temp_dir}/deps_mapping.txt"
  done < "$deps_file"

  cat "$deps_file" >> "${temp_dir}/all_deps.txt"
}

# Function to get package size
get_package_size() {
  local pkg=$1
  local pkg_manager=$2
  local size

  if [ "$pkg_manager" = "apt" ]; then
    size=$(apt-cache show "$pkg" 2>/dev/null | grep '^Size: ' | head -1 | awk '{print $2}') || true
  else
    size=$(apk info -s "$pkg" 2>/dev/null | grep '^Size: ' | head -1 | awk '{print $2}') || true
  fi

  # Return 0 if size is empty or not a number
  if [ -z "$size" ] || ! [[ "$size" =~ ^[0-9]+$ ]]; then
    echo "0"
  else
    echo "$size"
  fi
}

# Function to process dependencies
process_dependencies() {
  local temp_dir=$1
  local pkg_manager=$2
  local max_parents=$3
  local total_size=0
  local total_deps=0

  while read -r dep || [ -n "$dep" ]; do
    # Get package size
    local size
    size=$(get_package_size "$dep" "$pkg_manager")

    # Skip if size is zero
    if [ "$size" -gt 0 ]; then
      # Get all parent packages and count
      local all_parents parent_count parents
      all_parents=$(grep "^${dep}:" "${temp_dir}/deps_mapping.txt" | cut -d: -f2 | sort -u) || true
      parent_count=$(echo "$all_parents" | grep -c "." || echo "0")

      # Skip if number of parents exceeds maximum
      if [ -n "$max_parents" ] && [ "$parent_count" -gt "$max_parents" ]; then
        echo "Skipping $dep (used by $parent_count packages)" >&2
        continue
      fi

      parents=$(echo "$all_parents" | tr '\n' '|' | sed 's/|$//')
      if [ "$parent_count" -gt 5 ]; then
        parents="$(echo "$parents" | cut -d'|' -f1-5)..."
      fi

      total_size=$((total_size + size))
      total_deps=$((total_deps + 1))
      human_readable=$(human_size "$size")
      echo "${size}:${dep}:${human_readable}:${parent_count}:${parents}" >> "${temp_dir}/results.txt"
    fi
  done < "${temp_dir}/combined_deps.txt"

  echo "$total_size:$total_deps"
}

# Function to format and display results
display_results() {
  local temp_dir=$1
  local csv_output=$2
  local top_n=$3
  local total_size=$4
  local total_deps=$5

  # Sort results by size (descending)
  if [ -f "${temp_dir}/results.txt" ]; then
    sort -rn -t: -k1 "${temp_dir}/results.txt" > "${temp_dir}/sorted_results.txt"
  else
    touch "${temp_dir}/sorted_results.txt"
  fi

  # If top N is specified, create a truncated file
  if [ -n "$top_n" ] && [ -f "${temp_dir}/sorted_results.txt" ]; then
    head -n "$top_n" "${temp_dir}/sorted_results.txt" > "${temp_dir}/top_results.txt"
    mv "${temp_dir}/top_results.txt" "${temp_dir}/sorted_results.txt"
  fi

  # Output header
  if [ "$csv_output" -eq 1 ]; then
    echo "Package,Size (bytes),Human Size,Parent Count,Required By"
  else
    printf "%-40s %15s %15s %12s  %-50s\n" "Package" "Size (bytes)" "Human Size" "Parent Count" "Required By"
    echo "--------------------------------------------------------------------------------------------------------"
  fi

  # Output sorted results
  if [ -f "${temp_dir}/sorted_results.txt" ]; then
    while IFS=: read -r size dep human_readable parent_count parents; do
      if [ "$csv_output" -eq 1 ]; then
        echo "$dep,$size,$human_readable,$parent_count,$parents"
      else
        printf "%-40s %15d %15s %12d  %-50s\n" "$dep" "$size" "$human_readable" "$parent_count" "$parents"
      fi
    done < "${temp_dir}/sorted_results.txt"
  fi

  # Print total
  if [ "$csv_output" -eq 1 ]; then
    echo "TOTAL,$total_size,$(human_size "$total_size"),,"
  else
    echo "--------------------------------------------------------------------------------------------------------"
    printf "%-40s %15d %15s\n" "TOTAL" "$total_size" "$(human_size "$total_size")"
  fi
}

# Function to print summary
print_summary() {
  local pkg_manager="$1"
  local total_deps="$2"
  local total_size="$3"
  local max_parents="$4"
  local include_recommends="$5"
  local exclude_file="$6"
  shift 6
  local -a packages=("$@")

  echo >&2
  echo "Summary:" >&2
  echo "- Package manager: ${pkg_manager}" >&2
  echo "- Packages analyzed: ${packages[*]}" >&2
  echo "- Total unique dependencies: ${total_deps}" >&2
  echo "- Total combined size: $(human_size "$total_size")" >&2
  if [ -n "$max_parents" ]; then
    echo "- Excluding dependencies with more than $max_parents parent packages" >&2
  fi
  if [ "$pkg_manager" = "apt" ] && [ "$include_recommends" -eq 1 ]; then
    echo "- Including recommended packages" >&2
  fi
  if [ -n "$exclude_file" ]; then
    echo "- Excluding packages listed in: $exclude_file" >&2
  fi
}

# Main function
main() {
  # Initialize variables with defaults
  local include_recommends=0
  local csv_output=0
  local top_n=""
  local max_parents=""
  local exclude_file=""
  local -a packages=()
  local temp_dir=$(mktemp -d)

  # Set up cleanup trap immediately after creating temp dir
  # shellcheck disable=SC2064
  trap "rm -rf ${temp_dir}" EXIT

  # Parse command line arguments
  parse_args include_recommends csv_output top_n max_parents packages exclude_file "$@"

  # Validate input
  if [ "${#packages[@]}" -eq 0 ]; then
    echo "Error: At least one package name is required" >&2
    print_usage
    exit 1
  fi

  # Detect package manager
  local pkg_manager=$(detect_pkg_manager)
  echo "Using ${pkg_manager} package manager..." >&2

  if [ "$pkg_manager" = "apk" ] && [ "$include_recommends" -eq 1 ]; then
    echo "Warning: --include-recommends is not supported on Alpine Linux" >&2
  fi

  # Check cache status before continuing
  check_cache_status "$pkg_manager"

  # Process packages
  echo "Analyzing dependencies for packages: ${packages[*]}..." >&2
  for pkg in "${packages[@]}"; do
    echo "Processing $pkg..." >&2
    get_dependencies "$pkg" "$pkg_manager" "$include_recommends" "$temp_dir" "$exclude_file"
  done

  # Get unique dependencies
  sort -u "${temp_dir}/all_deps.txt" > "${temp_dir}/combined_deps.txt"

  # Process dependencies and get totals
  IFS=: read -r total_size total_deps < <(process_dependencies "$temp_dir" "$pkg_manager" "$max_parents")

  # Display results
  display_results "$temp_dir" "$csv_output" "$top_n" "$total_size" "$total_deps"

  # Print summary
  print_summary "$pkg_manager" "$total_deps" "$total_size" "$max_parents" "$include_recommends" "$exclude_file" "${packages[@]}"
}

# Run main function with all arguments
main "$@"
