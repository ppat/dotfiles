# .bashrc
# shellcheck shell=bash

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# save bash history when multiple shell sessions are open
# see: https://unix.stackexchange.com/a/48113
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
shopt -s histappend                      # append to history, don't overwrite it
# Save & reload history after each command (only configure if not already set)
_hist_hook="history -a; history -c; history -r"
case ":$PROMPT_COMMAND:" in
  *":$_hist_hook:"*) ;;  # already included, do nothing
  *) export PROMPT_COMMAND="$_hist_hook${PROMPT_COMMAND:+; $PROMPT_COMMAND}" ;;
esac

# coder specific shell configuration
if pgrep -f "coder agent" &> /dev/null; then
  # add injected coder CLI to the PATH
  _coder_cli_location="$(dirname "$(find /tmp/coder* -name coder -type f -executable 2>/dev/null | head -n1)")"
  if [[ -n "$_coder_cli_location" && ":$PATH:" != *":$_coder_cli_location:"* ]]; then
    export PATH="$_coder_cli_location:$PATH"
  fi
  unset _coder_cli_location
  # unset coder injected GIT_* vars
  unset GIT_ASKPASS
  unset GIT_SSH_COMMAND
fi

# shellcheck disable=SC2016
if command -v mise &> /dev/null; then
  eval "$(mise activate bash)"
fi

# shellcheck disable=SC2016
if command -v starship &> /dev/null; then
  eval "$(starship init bash)"
fi

# source additional bash rc configuration
if [[ -d "$HOME/.local/bash" ]]; then
  while IFS= read -r -d '' _file; do
    [[ -r "$_file" ]] && source "$_file"
  done < <(find "$HOME/.local/bash" -type f -print0)
  unset _file
fi
